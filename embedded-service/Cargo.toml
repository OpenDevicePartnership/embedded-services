[package]
name = "embedded-services"
version = "0.1.0"
edition = "2024"
license = "MIT"
description = "Embedded Service Layer for IPC, Feature Customization and Extension in Embedded Devices."
repository = "https://github.com/OpenDevicePartnership/embedded-services"
rust-version = "1.85"

[lints]
workspace = true

[dependencies]
bitfield.workspace = true
bitflags.workspace = true
bitvec.workspace = true
cfg-if.workspace = true
chrono = { workspace = true, optional = true }
critical-section.workspace = true
defmt = { workspace = true, optional = true }
document-features.workspace = true
embassy-sync.workspace = true
embassy-time.workspace = true
embedded-batteries-async.workspace = true
embedded-cfu-protocol.workspace = true
embedded-hal-async.workspace = true
embedded-io-async.workspace = true
embedded-io.workspace = true
embedded-usb-pd.workspace = true
heapless.workspace = true
log = { workspace = true, optional = true }

[dependencies.serde]
workspace = true
features = ["serde_derive"]

[target.'cfg(not(target_has_atomic = "ptr"))'.dependencies]
portable-atomic.workspace = true

[target.'cfg(target_os = "none")'.dependencies]
cortex-m-rt.workspace = true
cortex-m.workspace = true

[dev-dependencies]
critical-section = { workspace = true, features = ["std"] }
embassy-futures.workspace = true
embassy-sync = { workspace = true, features = ["std"] }
embassy-time = { workspace = true, features = ["std"] }
embassy-time-driver = { workspace = true }
static_cell.workspace = true
tokio = { workspace = true, features = ["rt", "macros", "time"] }

[features]
default = []
defmt = [
    "dep:defmt",
    "embassy-sync/defmt",
    "embassy-time/defmt",
    "embedded-usb-pd/defmt",
    "embedded-cfu-protocol/defmt",
]
log = [
    "dep:log",
    "embassy-sync/log",
    "embassy-time/log",
    "embedded-cfu-protocol/log",
]
